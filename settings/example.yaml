---

parameters:

  required:
    - name: IP_ADDRESSES
      type: string
      description: Space separated IP or DNS list of the host(s) to perform PIPELINE_ACTION and ROLE_SUBJECT.
    - name: SSH_LOGIN
      type: string
      description: Login for SSH connection for install/uninstall components and copy configs (The same for all hosts).
    - name: SSH_PASSWORD
      type: password
      description: SSH password for install/uninstall components and copy configs (The same for all hosts).
    - name: SSH_SUDO_PASSWORD
      type: password
      description: |
        SSH sudo password or root password for install/uninstall components and copy configs (The same for all hosts).
        If this parameter is empy SSH_PASSWORD will be used.
    - name: PIPELINE_ACTION
      action: True
      type: choice
      choices:
        - install lxc action name
        - show ansible hostname action name
        - run jenkins downstream job action name

  optional:
    - name: PERFORM_PING
      type: boolean
      default: False
      description: Perform ping
    - name: EMAIL
      type: string
      default: my-email@domain.net
      trim: False
      description: Email to send report.
    - name: LXCFS
      type: boolean
      default: False
      description: Install lxcfs instead of lxc.


stages:

  stage_1:
    - name: Clone sources
      action: git_clone_action_name
    - name: Install ansible galaxy collection
      action: ansible_galaxy_install_action_name
    - name: Run playbook or pipeline
      action: $PIPELINE_ACTION
    - name: Stash files
      action: stash files action name
    - name: Unstash files
      action: unstash files action name
      node:
        label: ansible29
    - name: Archive artifacts
      action: action archive artifacts action name

  stage_2:
    - name: Run custom part of pipeline
      action: run custom code as a part of pipeline action name
    - name: Run script
      action: run bash script action name
    - name: Email report
      action: email report action name
    - name: Mattermost report
      action: mattermost report action name
  parallel: True

  stage_3:
    - name: Run final script
      action:  run bash final script action name

actions:

  git_clone_action_name:
    repo_url: https://github.com/alexanderbazhenoff/ansible-collection-linux.git
    repo_branch: main
    directory: subdirectory_in_workspace_for_repository

  ansible_galaxy_install_action_name:
    collection: alexanderbazhenoff.linux

  install lxc action name:
    playbook: ping_playbook_name

  show ansible hostname action name:
    playbook: run_role_playbook_name

  run jenkins downstream job action name:
    pipeline: name_of_jenkins_pipeline
    parameters:
      - name: DOWNSTREAM_JOB_PARAMETER_1
        parameter: PARAMETER_1
      - name: DOWNSTREAM_PARAMETER3
        parameter: PARAMETER_2
    copy_artifacts:
      filter: test_file.txt
      fingerprint: True
      directory: downstream_job_artifacts_folder_name

  stash files action name:
    stash: stash_name
    includes: subdirectory_in_workspace_for_repository/**/*

  unstash files action name:
    unstash: stash_name

  action archive artifacts action name:
    artifacts: subdirectory_in_workspace_for_repository/**/roles/*, test_file.txt
    excludes: subdirectory_in_workspace_for_repository/**/roles/.*
    allow_empty: True

  run custom code as a part of pipeline action name:
    script: script_name_1

  run bash script action name:
    script: script_name_2

  email report action name:
    report: email
    to: $EMAIL
    reply_to: $EMAIL
    subject: Test email report
    body: |
      Hi,

      I've just run a test for universal jenkins wrapper pipeline: $JOB_NAME
      So I don't want to bother you, please ignore this automatic email report.

      Sincerely,
      Your Jenkins.

  mattermost report action name:
    report: mattermost
    url: https://mattermost.com/hooks/<token>
    text: |
      Hi, I've just run a test for universal jenkins wrapper pipeline: $JOB_NAME. 
      Please ignore this automatic email report.

  run bash final script action name:
    script: script_name_3


scripts:
  script_name_1:
    pipeline: |
      // some groovy code here
      println String.format('EMAIL executing %s action is awesome: %s', env.PIPELINE_ACTION, env.EMAIL)
  script_name_2:
    script:
      #!/usr/bin/env bash
      println "Here is some output of LXCFS environment variable, which also a pipeline parameter: %s\n" "$LXCFS"
      println "while the whole environment variables looks like: %s\n" "$(env)"

  script_name_3:
    script:
      #!/usr/bin/env bash
      echo "All done."


playbooks:
  - name: ping_playbook_name
    playbook: |
      - hosts: all
        become: True
        become_method: sudo
        gather_facts: True

        tasks:

          - name: "Ping host(s)"
            ansible.builtin.ping:
            when: $PERFORM_PING

  - name:  run_role_playbook_name
    playbook: |
      - hosts: all
        become: True
        become_method: sudo
        gather_facts: True

        tasks:

          - name: "Ping host(s)"
            ansible.builtin.ping:
            when: $PERFORM_PING

          - name: "Install lxc(fs)"
            ansible.builtin.include_role:
              name: alexanderbazhenoff.linux.lxcfs
            vars:
              lxc_technology: {{ $LXCFS | ternary ('lxcfs', 'lxc') }}


inventories:
  default: |
    [all]
    $IP_ADDRESSES

    [all:vars]
    ansible_connection=ssh
    ansible_become_user=root
    ansible_ssh_common_args='-o StrictHostKeyChecking=no'
    ansible_ssh_user=$SSH_LOGIN
    ansible_ssh_pass=$SSH_PASSWORD
    ansible_become_pass=$SSH_SUDO_PASSWORD
